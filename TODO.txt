GRAPHMAKER TASK LIST
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
$Id$


NetBeans transformation
----------------------------------------------------------------------
- Implement the graphical editor
  - Look at Shapes Integration Sample in graph/integration
  - Set the TopComponent toolbar via the graph panel
  - Look for XXX to fix uses of Scene, and in widget factory
- How to represent the tools, and connect them to the view?
  - NB graph library has something for this.
  - Tools should appear in the editor toolbar
  - Tools are represented by Actions, which are added to the toolbar
    - Invoking the action tells the ToolManager to set the current tool
    - Tool attaches itself to the current document and view
  - Define a ToolManager service
    - manages the tools (set current, attach, detach)
    - does not persist anything
- Should the model component client properties be persisted?
  - If so, done in DefaultModelBeanInfo.Persistent class.
- Implement undo/redo support (hook in through top component)
- Create appropriate icons for the data loader, data node, wizard
- Recompile Windows launcher to take new icon.


Popup menu and selecting objects
----------------------------------------------------------------------
Q: When widget is right clicked to show the popup menu, the widget
   should also be selected, so that the user knows which widget the
   popup menu corresponds to. What is the right way to do it?

A: This could be done by following code:

Widget myWidget = ...;
myWidget.getActions().addAction(myObjectScene.createObjectSelectAction());
myWidget.getActions().addAction(ActionFactory.createPopupMenuAction(...));

   The first action selects appropriate object related to myWidget when
   an user left- or right-clicks on the widget. The event is not consumed
   totally (state = State.CHAIN_ONLY). Therfore the event is processed by
   the popup-menu action and therefore the menu is shown.

   If you do not use object-scene or you are performing the selection
   diferrent way, then you can use following code:

Widget myWidget = ...;
myWidget.getActions().addAction(ActionFactory.createPopupMenuAction(
        new PopupMenuProvider() {
  public JPopupMenu getPopupMenu(Widget widget, Point localLocation) {
      // do the selection manually e.g.
      myObjectScene.setSelectedObjects (myObjects);
      return new JPopupMenu (); // return your popup menu as before
  }
});
